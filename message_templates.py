"""Utilities for generating user-facing messages with event details."""
from __future__ import annotations

from datetime import datetime
from typing import Dict, Optional

import re
from zoneinfo import ZoneInfo

from config import TIMEZONE, load_settings

MISSING_VALUE = "‚ùóÔ∏è–ù–µ —É–∫–∞–∑–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
MONTH_NAMES = [
    "",
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
]
TZ = ZoneInfo(TIMEZONE)

DESCRIPTION_LIMIT = 400


def _format_value(value: Optional[object]) -> str:
    if value is None:
        return MISSING_VALUE
    if isinstance(value, str):
        stripped = value.strip()
        return stripped if stripped else MISSING_VALUE
    return str(value)


def _short_description(value: Optional[object], limit: int = DESCRIPTION_LIMIT) -> str:
    if value is None:
        return MISSING_VALUE
    if isinstance(value, str):
        text = value.strip()
    else:
        text = str(value).strip()
    if not text:
        return MISSING_VALUE
    normalized = re.sub(r"\s+", " ", text)
    if len(normalized) <= limit:
        return normalized
    window_start = max(0, limit - 80)
    cutoff = normalized.rfind(" ", window_start, limit)
    if cutoff == -1 or cutoff < window_start:
        cutoff = limit
    return f"{normalized[:cutoff].rstrip()}‚Ä¶"


def _format_datetime(event_iso: Optional[object]) -> str:
    if not event_iso:
        return MISSING_VALUE
    try:
        dt = datetime.fromisoformat(str(event_iso))
    except ValueError:
        return MISSING_VALUE
    local_dt = dt.astimezone(TZ)
    if 1 <= local_dt.month < len(MONTH_NAMES):
        month_name = MONTH_NAMES[local_dt.month]
    else:
        month_name = local_dt.strftime("%B")
    return f"{local_dt.day} {month_name} {local_dt.year}, {local_dt.strftime('%H:%M')}"


def get_event_context(settings: Optional[Dict[str, object]] = None) -> Dict[str, str]:
    """Return event-related placeholders for user messages."""

    if settings is None:
        settings = load_settings()

    topic = _format_value(settings.get("topic"))
    description = _short_description(settings.get("description"))
    payment_link = _format_value(settings.get("payment_link"))

    local_dt = _format_datetime(settings.get("current_event_datetime"))
    timezone_value = _format_value(settings.get("timezone"))
    if timezone_value == MISSING_VALUE:
        timezone_value = TIMEZONE

    return {
        "title": topic,
        "description": description,
        "payment_link": payment_link,
        "local_datetime": local_dt,
        "timezone": timezone_value,
    }


def build_free_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
        f"üß† {ctx['title']}\n"
        f"üìÖ {ctx['local_datetime']} ({ctx['timezone']})\n"
        f"üìù {ctx['description']}\n\n"
        "üë§ –¢–∏–ø —É—á–∞—Å—Ç–∏—è: –£—á–∞—Å—Ç–Ω–∏–∫ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n\n"
        "–ú—ã –ø—Ä–∏—à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –∏ –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    )


def build_paid_pending_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "üßæ –†–∞–∑–±–æ—Ä (–ø–ª–∞—Ç–Ω–æ)\n\n"
        f"üß† {ctx['title']}\n"
        f"üìÖ {ctx['local_datetime']} ({ctx['timezone']})\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–∏—è –≤–Ω–µ—Å–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        f"{ctx['payment_link']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª, —á—Ç–æ–±—ã –º—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Å—Ç–∞—Ç—É—Å.\n"
        "–ú—ã –ø—Ä–∏—à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –∏ –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    )


def build_paid_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞\n\n"
        f"üß† {ctx['title']}\n"
        f"üìÖ {ctx['local_datetime']} ({ctx['timezone']})\n"
        "üë§ –¢–∏–ø —É—á–∞—Å—Ç–∏—è: –†–∞–∑–±–æ—Ä (–ø–ª–∞—Ç–Ω–æ)\n"
        "üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—á–µ–Ω–æ\n\n"
        "–ú—ã –ø—Ä–∏—à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –∏ –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    )
