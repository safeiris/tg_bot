"""Utilities for generating user-facing messages with event details."""
from __future__ import annotations

from datetime import datetime
from typing import Dict, Optional

from zoneinfo import ZoneInfo

from config import TIMEZONE, load_settings

MISSING_VALUE = "‚ùóÔ∏è–ù–µ —É–∫–∞–∑–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
MONTH_NAMES = [
    "",
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è",
]
TZ = ZoneInfo(TIMEZONE)


def _format_value(value: Optional[object]) -> str:
    if value is None:
        return MISSING_VALUE
    if isinstance(value, str):
        stripped = value.strip()
        return stripped if stripped else MISSING_VALUE
    return str(value)


def _format_datetime(event_iso: Optional[object]) -> str:
    if not event_iso:
        return MISSING_VALUE
    try:
        dt = datetime.fromisoformat(str(event_iso))
    except ValueError:
        return MISSING_VALUE
    local_dt = dt.astimezone(TZ)
    if 1 <= local_dt.month < len(MONTH_NAMES):
        month_name = MONTH_NAMES[local_dt.month]
    else:
        month_name = local_dt.strftime("%B")
    return f"{local_dt.day} {month_name} {local_dt.year}, {local_dt.strftime('%H:%M')}"


def get_event_context(settings: Optional[Dict[str, object]] = None) -> Dict[str, str]:
    """Return event-related placeholders for user messages."""

    if settings is None:
        settings = load_settings()

    topic = _format_value(settings.get("topic"))
    description = _format_value(settings.get("description"))
    payment_link = _format_value(settings.get("payment_link"))

    local_dt = _format_datetime(settings.get("current_event_datetime"))
    timezone_value = _format_value(settings.get("timezone"))
    if timezone_value == MISSING_VALUE:
        timezone_value = TIMEZONE

    return {
        "title": topic,
        "description": description,
        "payment_link": payment_link,
        "local_datetime": local_dt,
        "timezone": timezone_value,
    }


def build_free_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n\n"
        f"üß† –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ctx['title']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {ctx['description']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ctx['local_datetime']} ({ctx['timezone']})\n"
        "üë§ –†–æ–ª—å: –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n\n"
        "üîî –ù–∞–ø–æ–º–Ω–∏–º –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞.\n"
        "üîó –°—Å—ã–ª–∫—É –Ω–∞ Zoom –ø—Ä–∏—à–ª—ë–º –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    )


def build_paid_pending_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "üßæ –£—á–∞—Å—Ç–∏–µ —Å –ª–∏—á–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º\n\n"
        f"üß† –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ctx['title']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ctx['local_datetime']} ({ctx['timezone']})\n\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        f"{ctx['payment_link']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –º—ã –ø—Ä–∏—à–ª—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."
    )


def build_paid_confirmation(settings: Optional[Dict[str, object]] = None) -> str:
    ctx = get_event_context(settings)
    return (
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n\n"
        f"üß† –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ctx['title']}\n"
        f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {ctx['local_datetime']} ({ctx['timezone']})\n"
        "üë§ –†–æ–ª—å: –ü–ª–∞—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫\n"
        "üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: –û–ø–ª–∞—á–µ–Ω–æ\n\n"
        "üîî –ù–∞–ø–æ–º–Ω–∏–º –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞.\n"
        "üîó –°—Å—ã–ª–∫—É –Ω–∞ Zoom –ø—Ä–∏—à–ª—ë–º –≤ –¥–µ–Ω—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è."
    )
