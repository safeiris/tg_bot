"""Admin inline interface with hierarchical navigation."""
from __future__ import annotations

import html
import re
from datetime import datetime
from typing import Dict, List, Optional, Tuple

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from zoneinfo import ZoneInfo

import database
from config import TIMEZONE, is_admin
from events import (
    Event,
    classify_status,
    create_event,
    get_current_event,
    get_current_event_id,
    get_event,
    list_events,
    open_sheet_url,
    set_current_event,
    update_event,
)
from scheduler import ensure_scheduler_started, schedule_all_reminders

TZ = ZoneInfo(TIMEZONE)
PAGE_SIZE = 5
TIMEZONE_PRESETS: List[Tuple[str, str]] = [
    ("Europe/Moscow", "Europe/Moscow (UTC+3)"),
    ("Europe/Kaliningrad", "Europe/Kaliningrad (UTC+2)"),
    ("Europe/Berlin", "Europe/Berlin (UTC+1/+2)"),
    ("Asia/Almaty", "Asia/Almaty (UTC+6)"),
    ("Asia/Vladivostok", "Asia/Vladivostok (UTC+10)"),
    ("UTC", "UTC"),
]

EMOJI_NUMBERS = {
    1: "1Ô∏è‚É£",
    2: "2Ô∏è‚É£",
    3: "3Ô∏è‚É£",
    4: "4Ô∏è‚É£",
    5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£",
    7: "7Ô∏è‚É£",
    8: "8Ô∏è‚É£",
    9: "9Ô∏è‚É£",
    10: "üîü",
}


def _stack(context: ContextTypes.DEFAULT_TYPE) -> List[Dict[str, object]]:
    return context.user_data.setdefault("admin_nav_stack", [])


def _reset_stack(context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["admin_nav_stack"] = []


def _current_entry(context: ContextTypes.DEFAULT_TYPE) -> Optional[Dict[str, object]]:
    stack = _stack(context)
    return stack[-1] if stack else None


def _push_entry(context: ContextTypes.DEFAULT_TYPE, screen: str, **data: object) -> None:
    _stack(context).append({"screen": screen, "data": data})


def _replace_top(context: ContextTypes.DEFAULT_TYPE, screen: str, **data: object) -> None:
    stack = _stack(context)
    if stack:
        stack[-1] = {"screen": screen, "data": data}
    else:
        _push_entry(context, screen, **data)


def _pop_entry(context: ContextTypes.DEFAULT_TYPE) -> Optional[Dict[str, object]]:
    stack = _stack(context)
    if not stack:
        return None
    return stack.pop()


def _clear_draft(context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.pop("draft_event", None)


def _clear_await(context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.pop("await", None)


async def _ensure_admin(update: Update) -> bool:
    user = update.effective_user
    if user and is_admin(chat_id=user.id, username=user.username):
        return True
    if update.callback_query:
        await update.callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
    elif update.message:
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
    return False


async def admin_command_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await _ensure_admin(update):
        return
    _clear_draft(context)
    _clear_await(context)
    _reset_stack(context)
    _push_entry(context, "main")
    await show_main_menu(update, context)


async def _send_panel(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    text: str,
    keyboard: InlineKeyboardMarkup,
) -> None:
    chat = update.effective_chat
    chat_id = chat.id if chat else None
    message_id = context.user_data.get("admin_panel_message_id")
    if update.callback_query and update.callback_query.message:
        await update.callback_query.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        context.user_data["admin_panel_message_id"] = update.callback_query.message.message_id
        return
    if chat_id and message_id:
        try:
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True,
            )
            return
        except Exception:
            pass
    if update.message:
        sent = await update.message.reply_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        context.user_data["admin_panel_message_id"] = sent.message_id
    elif chat_id:
        sent = await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
        )
        context.user_data["admin_panel_message_id"] = sent.message_id


def _format_event_datetime(event: Event) -> str:
    dt = event.parsed_datetime
    if not dt:
        return "‚ùóÔ∏è–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    local = dt.astimezone(ZoneInfo(event.timezone or TIMEZONE))
    month_names = [
        "",
        "—è–Ω–≤–∞—Ä—è",
        "—Ñ–µ–≤—Ä–∞–ª—è",
        "–º–∞—Ä—Ç–∞",
        "–∞–ø—Ä–µ–ª—è",
        "–º–∞—è",
        "–∏—é–Ω—è",
        "–∏—é–ª—è",
        "–∞–≤–≥—É—Å—Ç–∞",
        "—Å–µ–Ω—Ç—è–±—Ä—è",
        "–æ–∫—Ç—è–±—Ä—è",
        "–Ω–æ—è–±—Ä—è",
        "–¥–µ–∫–∞–±—Ä—è",
    ]
    if 1 <= local.month < len(month_names):
        month = month_names[local.month]
    else:
        month = local.strftime("%B")
    return f"{local.day} {month} {local.year}, {local.strftime('%H:%M')}"


def _format_event_card(event: Optional[Event], status_message: Optional[str] = None) -> str:
    lines: List[str] = ["<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>"]
    if event:
        status = classify_status(event)
        status_label = {
            "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
            "past": "üîµ –ü—Ä–æ—à–ª–æ",
            "cancelled": "üî¥ –û—Ç–º–µ–Ω–µ–Ω–æ",
        }.get(status, status)
        lines.append(f"–°—Ç–∞—Ç—É—Å: {status_label}")
        lines.append(f"üß† –ù–∞–∑–≤–∞–Ω–∏–µ: {html.escape(event.title or '‚Äî')}")
        description = event.description or "‚Äî"
        lines.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {html.escape(description)}")
        lines.append(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {html.escape(_format_event_datetime(event))}")
        zoom = html.escape(event.zoom_url or "‚Äî")
        lines.append(f"üîó Zoom: {zoom}")
        payment = html.escape(event.pay_url or "‚Äî")
        lines.append(f"üí≥ –û–ø–ª–∞—Ç–∞: {payment}")
        lines.append(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {html.escape(event.timezone or TIMEZONE)}")
        lines.append(f"üìÑ –õ–∏—Å—Ç: {html.escape(event.sheet_name or '‚Äî')}")
    else:
        lines.append("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        lines.append("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
    if status_message:
        lines.append("")
        lines.append(status_message)
    return "\n".join(lines)


def _main_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üÜï –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="admin:menu:new")],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="admin:menu:list")],
        [InlineKeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="admin:menu:participants")],
        [InlineKeyboardButton("üì£ –ù–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ–º", callback_data="admin:menu:remind")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def _show_main_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    status_message: Optional[str] = None,
) -> None:
    event = get_current_event()
    text = _format_event_card(event, status_message)
    await _send_panel(update, context, text, _main_menu_keyboard())


async def show_main_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    status_message: Optional[str] = None,
) -> None:
    """Public entry point to render the admin main menu."""
    await _show_main_menu(update, context, status_message=status_message)


async def show_admin_panel(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    status_message: Optional[str] = None,
) -> None:
    """Backward-compatible alias for :func:`show_main_menu`."""
    await show_main_menu(update, context, status_message=status_message)


def _list_row(event: Event) -> str:
    dt = _format_event_datetime(event)
    status = classify_status(event)
    status_map = {
        "active": "",
        "past": " (–ø—Ä–æ—à–ª–æ)",
        "cancelled": " (–æ—Ç–º–µ–Ω–µ–Ω–æ)",
    }
    suffix = status_map.get(status, "")
    return f"{html.escape(event.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {html.escape(dt)}{suffix}"


def _list_keyboard(
    events: List[Event],
    page: int,
    total_pages: int,
) -> InlineKeyboardMarkup:
    rows: List[List[InlineKeyboardButton]] = []
    if events:
        buttons: List[InlineKeyboardButton] = []
        for idx, event in enumerate(events, start=1):
            label = EMOJI_NUMBERS.get(idx, str(idx))
            buttons.append(
                InlineKeyboardButton(label, callback_data=f"admin:list:pick:{event.event_id}")
            )
        rows.append(buttons)
    prev_page = max(1, page - 1)
    next_page = min(total_pages, page + 1)
    rows.append(
        [
            InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"admin:list:page:{prev_page}" if page > 1 else f"admin:list:page:{page}",
            ),
            InlineKeyboardButton(f"–°—Ç—Ä. {page}/{total_pages}", callback_data="admin:list:page:noop"),
            InlineKeyboardButton(
                "–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è",
                callback_data=f"admin:list:page:{next_page}" if page < total_pages else f"admin:list:page:{page}",
            ),
        ]
    )
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:list:back")])
    return InlineKeyboardMarkup(rows)


async def _show_event_list(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    page: int = 1,
    status_message: Optional[str] = None,
) -> None:
    events, total_pages, total = list_events(page, PAGE_SIZE)
    if events:
        lines = ["üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]
        for idx, event in enumerate(events, start=1):
            lines.append(f"{idx}) {_list_row(event)}")
    else:
        lines = ["üìÖ –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "–ü–æ–∫–∞ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ."]
    if status_message:
        lines.append("")
        lines.append(status_message)
    text = "\n".join(lines)
    keyboard = _list_keyboard(events, page, total_pages if total else 1)
    _replace_top(context, "list", page=page)
    await _send_panel(update, context, text, keyboard)


def _draft(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, object]:
    draft = context.user_data.setdefault(
        "draft_event",
        {
            "title": "",
            "description": "",
            "datetime": None,
            "timezone": TIMEZONE,
            "zoom_url": "",
            "pay_url": "",
        },
    )
    if not draft.get("timezone"):
        draft["timezone"] = TIMEZONE
    return draft


def _format_draft_datetime(draft: Dict[str, object]) -> str:
    dt: Optional[datetime] = draft.get("datetime")
    if not dt:
        return "‚ùóÔ∏è–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    tz = draft.get("timezone") or TIMEZONE
    return _format_event_datetime(
        Event(
            event_id="draft",
            title="",
            description="",
            datetime_local=dt.astimezone(ZoneInfo(tz)).isoformat(),
            timezone=str(tz),
            zoom_url="",
            pay_url="",
            sheet_name="",
            sheet_link="",
            status="active",
            created_at="",
            updated_at="",
        )
    )


def _draft_text(draft: Dict[str, object], status_message: Optional[str] = None) -> str:
    lines = ["üõ† –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]
    lines.append(f"üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: {html.escape((draft.get('title') or '').strip() or '‚Äî')}")
    desc = (draft.get("description") or "").strip() or "‚Äî"
    lines.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {html.escape(desc)}")
    lines.append(f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {html.escape(_format_draft_datetime(draft))}")
    lines.append(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {html.escape(str(draft.get('timezone') or TIMEZONE))}")
    zoom = (draft.get("zoom_url") or "").strip() or "‚Äî"
    lines.append(f"üîó Zoom: {html.escape(zoom)}")
    pay = (draft.get("pay_url") or "").strip() or "‚Äî"
    lines.append(f"üí≥ –û–ø–ª–∞—Ç–∞: {html.escape(pay)}")
    if status_message:
        lines.append("")
        lines.append(status_message)
    return "\n".join(lines)


def _new_event_keyboard(ready: bool) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üìõ –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="admin:new:title")],
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="admin:new:desc")],
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", callback_data="admin:new:dt")],
        [InlineKeyboardButton("üîó Zoom", callback_data="admin:new:zoom")],
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞", callback_data="admin:new:pay")],
        [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="admin:new:tz")],
    ]
    rows.append([InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å", callback_data="admin:new:confirm")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")])
    return InlineKeyboardMarkup(rows)


async def _show_new_event(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    *,
    status_message: Optional[str] = None,
) -> None:
    draft = _draft(context)
    ready = bool(draft.get("title") and draft.get("datetime"))
    text = _draft_text(draft, status_message)
    _replace_top(context, "new")
    await _send_panel(update, context, text, _new_event_keyboard(ready))


async def _show_timezone_picker(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    draft = _draft(context)
    current = str(draft.get("timezone") or TIMEZONE)
    rows = [
        [
            InlineKeyboardButton(
                ("‚úÖ " if current == tz else "") + label,
                callback_data=f"admin:new:tzset:{tz}",
            )
        ]
        for tz, label in TIMEZONE_PRESETS
    ]
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")])
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"
    _replace_top(context, "new_tz")
    await _send_panel(update, context, text, InlineKeyboardMarkup(rows))


async def _show_new_confirm(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
) -> None:
    draft = _draft(context)
    text = _draft_text(draft, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ.")
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="admin:new:create")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")],
        ]
    )
    _replace_top(context, "new_confirm")
    await _send_panel(update, context, text, keyboard)


def _format_event_detail(event: Event, status_message: Optional[str] = None) -> str:
    card = _format_event_card(event)
    lines = [card, "", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]
    if status_message:
        lines.append("")
        lines.append(status_message)
    return "\n".join(lines)


def _event_menu_keyboard(event: Event) -> InlineKeyboardMarkup:
    base = f"admin:ev:{event.event_id}"
    rows = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"{base}:edit_title")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"{base}:edit_desc")],
        [InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data=f"{base}:edit_dt")],
        [InlineKeyboardButton("üîó –û–±–Ω–æ–≤–∏—Ç—å Zoom", callback_data=f"{base}:edit_zoom")],
        [InlineKeyboardButton("üí≥ –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"{base}:edit_pay")],
        [InlineKeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data=f"{base}:open_sheet")],
        [InlineKeyboardButton("üóë –û—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data=f"{base}:cancel")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{base}:back")],
    ]
    return InlineKeyboardMarkup(rows)


async def _show_event_menu(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    event_id: str,
    *,
    status_message: Optional[str] = None,
) -> None:
    event = get_event(event_id)
    if not event:
        await _show_event_list(update, context, page=1, status_message="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    _replace_top(context, "event", event_id=event_id)
    text = _format_event_detail(event, status_message)
    await _send_panel(update, context, text, _event_menu_keyboard(event))


async def _show_cancel_confirmation(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    event_id: str,
) -> None:
    event = get_event(event_id)
    if not event:
        await _show_event_list(update, context, page=1, status_message="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    text = _format_event_detail(event, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ?")
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"admin:ev:{event_id}:cancel_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"admin:ev:{event_id}:cancel_no")],
        ]
    )
    _replace_top(context, "event_cancel", event_id=event_id)
    await _send_panel(update, context, text, keyboard)


def _parse_datetime(text: str, timezone: str) -> datetime:
    variants = ["%d.%m.%Y %H:%M", "%d.%m %H:%M", "%Y-%m-%d %H:%M"]
    for fmt in variants:
        try:
            dt = datetime.strptime(text.strip(), fmt)
            if fmt == "%d.%m %H:%M":
                now = datetime.now(ZoneInfo(timezone))
                dt = dt.replace(year=now.year)
            return dt.replace(tzinfo=ZoneInfo(timezone))
        except ValueError:
            continue
    raise ValueError("invalid datetime")


async def _handle_new_event_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    data: str,
) -> None:
    if update.callback_query:
        await update.callback_query.answer()
    if data == "admin:new:title":
        _clear_await(context)
        context.user_data["await"] = {"type": "new_title"}
        await _show_new_event(update, context, status_message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Ç–µ–∫—Å—Ç–æ–º.")
        return
    if data == "admin:new:desc":
        _clear_await(context)
        context.user_data["await"] = {"type": "new_desc"}
        await _show_new_event(update, context, status_message="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        return
    if data == "admin:new:dt":
        draft = _draft(context)
        tz = draft.get("timezone") or TIMEZONE
        _clear_await(context)
        context.user_data["await"] = {"type": "new_dt", "timezone": tz}
        await _show_new_event(
            update,
            context,
            status_message="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
        )
        return
    if data == "admin:new:zoom":
        _clear_await(context)
        context.user_data["await"] = {"type": "new_zoom"}
        await _show_new_event(update, context, status_message="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É Zoom –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if data == "admin:new:pay":
        _clear_await(context)
        context.user_data["await"] = {"type": "new_pay"}
        await _show_new_event(update, context, status_message="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if data == "admin:new:tz":
        _clear_await(context)
        _push_entry(context, "new_tz")
        await _show_timezone_picker(update, context)
        return
    if data.startswith("admin:new:tzset:"):
        tz = data.split(":", 3)[3]
        draft = _draft(context)
        draft["timezone"] = tz
        _pop_entry(context)
        await _show_new_event(update, context, status_message=f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tz}")
        return
    if data == "admin:new:confirm":
        draft = _draft(context)
        if not draft.get("title") or not draft.get("datetime"):
            await _show_new_event(update, context, status_message="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—É.")
            return
        _clear_await(context)
        _push_entry(context, "new_confirm")
        await _show_new_confirm(update, context)
        return
    if data == "admin:new:create":
        draft = _draft(context)
        title = (draft.get("title") or "").strip()
        dt: Optional[datetime] = draft.get("datetime")
        if not title or not dt:
            await _show_new_event(update, context, status_message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
        description = (draft.get("description") or "").strip()
        timezone = str(draft.get("timezone") or TIMEZONE)
        zoom_url = (draft.get("zoom_url") or "").strip()
        pay_url = (draft.get("pay_url") or "").strip()
        event = create_event(
            title=title,
            description=description,
            event_dt=dt,
            timezone=timezone,
            zoom_url=zoom_url,
            pay_url=pay_url,
        )
        ensure_scheduler_started()
        schedule_all_reminders(context.application)
        _clear_draft(context)
        _clear_await(context)
        _reset_stack(context)
        _push_entry(context, "main")
        await _show_main_menu(
            update,
            context,
            status_message=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {html.escape(event.title)}",
        )
        return


async def _handle_event_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    event_id: str,
    action: str,
) -> None:
    if update.callback_query:
        await update.callback_query.answer()
    if action == "back":
        _pop_entry(context)
        await _show_event_list(update, context, page=1)
        return
    if action == "edit_title":
        _clear_await(context)
        context.user_data["await"] = {"type": "ev_edit_title", "event_id": event_id}
        await _show_event_menu(update, context, event_id, status_message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    if action == "edit_desc":
        _clear_await(context)
        context.user_data["await"] = {"type": "ev_edit_desc", "event_id": event_id}
        await _show_event_menu(update, context, event_id, status_message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        return
    if action == "edit_dt":
        event = get_event(event_id)
        if not event:
            await _show_event_list(update, context, page=1, status_message="–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        _clear_await(context)
        context.user_data["await"] = {
            "type": "ev_edit_dt",
            "event_id": event_id,
            "timezone": event.timezone or TIMEZONE,
        }
        await _show_event_menu(
            update,
            context,
            event_id,
            status_message="–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú",
        )
        return
    if action == "edit_zoom":
        _clear_await(context)
        context.user_data["await"] = {"type": "ev_edit_zoom", "event_id": event_id}
        await _show_event_menu(update, context, event_id, status_message="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Zoom –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if action == "edit_pay":
        _clear_await(context)
        context.user_data["await"] = {"type": "ev_edit_pay", "event_id": event_id}
        await _show_event_menu(update, context, event_id, status_message="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    if action == "open_sheet":
        try:
            link = open_sheet_url(event_id)
        except KeyError:
            await _show_event_menu(update, context, event_id, status_message="–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        await _show_event_menu(update, context, event_id, status_message=f"–°—Å—ã–ª–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {link}")
        return
    if action == "cancel":
        _push_entry(context, "event_cancel", event_id=event_id)
        await _show_cancel_confirmation(update, context, event_id)
        return
    if action == "cancel_yes":
        update_event(event_id, {"status": "cancelled"})
        if get_current_event_id() == event_id:
            set_current_event(None)
        await _show_event_list(update, context, page=1, status_message="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    if action == "cancel_no":
        _pop_entry(context)
        await _show_event_menu(update, context, event_id)
        return


async def _handle_menu_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    data: str,
) -> None:
    if update.callback_query:
        await update.callback_query.answer()
    if data == "admin:menu:new":
        _clear_draft(context)
        _clear_await(context)
        _push_entry(context, "new")
        await _show_new_event(update, context, status_message="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.")
        return
    if data == "admin:menu:list":
        _clear_await(context)
        _push_entry(context, "list", page=1)
        await _show_event_list(update, context, page=1)
        return
    if data == "admin:menu:participants":
        current = get_current_event_id()
        if not current:
            await _show_main_menu(update, context, status_message="–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
            return
        link = open_sheet_url(current)
        await _show_main_menu(update, context, status_message=f"–°—Å—ã–ª–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {link}")
        return
    if data == "admin:menu:remind":
        _clear_await(context)
        _push_entry(context, "broadcast")
        context.user_data["await"] = {"type": "broadcast"}
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:back")]])
        text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        await _send_panel(update, context, text, keyboard)
        return


async def _handle_list_callback(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    data: str,
) -> None:
    if update.callback_query:
        await update.callback_query.answer()
    if data == "admin:list:back":
        _pop_entry(context)
        await _show_main_menu(update, context)
        return
    if data.startswith("admin:list:page:"):
        parts = data.split(":")
        page_part = parts[-1]
        entry = _current_entry(context) or {"data": {}}
        if page_part == "noop":
            page = entry.get("data", {}).get("page", 1)
        else:
            try:
                page = max(1, int(page_part))
            except ValueError:
                page = 1
        await _show_event_list(update, context, page=page)
        return
    if data.startswith("admin:list:pick:"):
        event_id = data.split(":", 2)[2]
        _push_entry(context, "event", event_id=event_id)
        await _show_event_menu(update, context, event_id)
        return


async def _handle_nav_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.callback_query:
        await update.callback_query.answer()
    entry = _current_entry(context)
    if not entry:
        _reset_stack(context)
        _push_entry(context, "main")
        await _show_main_menu(update, context)
        return
    screen = entry.get("screen")
    _clear_await(context)
    if screen == "new":
        _pop_entry(context)
        _clear_draft(context)
        await _show_main_menu(update, context)
        return
    if screen in {"new_tz", "new_confirm"}:
        _pop_entry(context)
        await _show_new_event(update, context)
        return
    if screen == "broadcast":
        _pop_entry(context)
        await _show_main_menu(update, context)
        return
    if screen == "event_cancel":
        data = entry.get("data", {})
        event_id = data.get("event_id") if isinstance(data, dict) else None
        _pop_entry(context)
        if event_id:
            await _show_event_menu(update, context, event_id)
        else:
            await _show_event_list(update, context, page=1)
        return
    _pop_entry(context)
    previous = _current_entry(context)
    if not previous:
        _reset_stack(context)
        _push_entry(context, "main")
        await _show_main_menu(update, context)
        return
    screen = previous.get("screen")
    data = previous.get("data", {})
    if screen == "main":
        await _show_main_menu(update, context)
    elif screen == "list":
        await _show_event_list(update, context, page=data.get("page", 1))
    elif screen == "event":
        await _show_event_menu(update, context, data.get("event_id"))
    elif screen == "new":
        await _show_new_event(update, context)


async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query:
        return
    if not await _ensure_admin(update):
        return
    data = query.data or ""
    if data.startswith("admin:menu:"):
        await _handle_menu_callback(update, context, data)
        return
    if data.startswith("admin:list:"):
        await _handle_list_callback(update, context, data)
        return
    if data.startswith("admin:new:"):
        await _handle_new_event_callback(update, context, data)
        return
    match = re.match(r"^admin:ev:([^:]+):(.*)$", data)
    if match:
        event_id = match.group(1)
        action = match.group(2)
        await _handle_event_callback(update, context, event_id, action)
        return
    if data == "nav:back":
        await _handle_nav_back(update, context)
        return


async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await _ensure_admin(update):
        return
    await_state = context.user_data.get("await")
    if not await_state:
        return
    text = (update.message.text or "").strip()
    state_type = await_state.get("type")
    if state_type == "broadcast":
        if not text:
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        recipients = database.list_chat_ids()
        for chat_id in recipients:
            await context.bot.send_message(chat_id=chat_id, text=text)
        _clear_await(context)
        _pop_entry(context)
        await _show_main_menu(update, context, status_message="–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
        return
    if state_type == "new_title":
        if not text:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        _draft(context)["title"] = text
        _clear_await(context)
        await _show_new_event(update, context, status_message="–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        return
    if state_type == "new_desc":
        _draft(context)["description"] = text
        _clear_await(context)
        await _show_new_event(update, context, status_message="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    if state_type == "new_dt":
        tz = await_state.get("timezone", TIMEZONE)
        try:
            dt = _parse_datetime(text, tz)
        except ValueError:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        _draft(context)["datetime"] = dt
        _clear_await(context)
        await _show_new_event(update, context, status_message="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        return
    if state_type == "new_zoom":
        _draft(context)["zoom_url"] = text
        _clear_await(context)
        await _show_new_event(update, context, status_message="–°—Å—ã–ª–∫–∞ Zoom —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        return
    if state_type == "new_pay":
        _draft(context)["pay_url"] = text
        _clear_await(context)
        await _show_new_event(update, context, status_message="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        return
    event_id = await_state.get("event_id")
    if not event_id:
        return
    if state_type == "ev_edit_title":
        if not text:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        update_event(event_id, {"title": text})
        _clear_await(context)
        await _show_event_menu(update, context, event_id, status_message="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    if state_type == "ev_edit_desc":
        update_event(event_id, {"description": text})
        _clear_await(context)
        await _show_event_menu(update, context, event_id, status_message="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        return
    if state_type == "ev_edit_dt":
        tz = await_state.get("timezone", TIMEZONE)
        try:
            dt = _parse_datetime(text, tz)
        except ValueError:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        update_event(event_id, {"datetime_local": dt.isoformat(), "timezone": tz})
        if get_current_event_id() == event_id:
            ensure_scheduler_started()
            schedule_all_reminders(context.application)
        _clear_await(context)
        await _show_event_menu(update, context, event_id, status_message="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        return
    if state_type == "ev_edit_zoom":
        update_event(event_id, {"zoom_url": text})
        _clear_await(context)
        await _show_event_menu(update, context, event_id, status_message="–°—Å—ã–ª–∫–∞ Zoom –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return
    if state_type == "ev_edit_pay":
        update_event(event_id, {"pay_url": text})
        _clear_await(context)
        await _show_event_menu(update, context, event_id, status_message="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        return
